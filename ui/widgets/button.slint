import { MaterialPalette, MaterialScheme, AccentScheme } from "../material-palette.slint";
import { ButtonStyle, StyleFactory } from "style/global.slint";
import { ControlSize, ControlTheme } from "style/metrics.slint";



export component Button {
  in property <AccentScheme> base-accent: MaterialScheme.base-accent;
  in property <AccentScheme> accent: MaterialScheme.base-accent;


  in property <bool> filled: false;
  in property <ControlSize> size: ControlSize.Medium;
  in property <ControlTheme> theme: ControlTheme.Rounded;

  in property <ButtonStyle> style: StyleFactory.button(filled, size, theme);

  in-out property <string> text <=> i-label.text;
  in-out property <bool> enabled: true;

  out property <bool> pressed: self.enabled && i-touch-area.pressed;

  width: i-label.width + style.padding-x * 2 + style.margin-x * 2;
  height: i-label.height + style.depress + style.padding-y * 2 + style.margin-y * 2;

  i-box := Rectangle {
    x: root.width / 2 - self.width / 2;
    y: root.height / 2 - self.height / 2;

    width: root.width - style.margin-x * 2;
    height: root.height - style.margin-y * 2;

    i-bottom := Rectangle {
      y: style.depress;

      width: i-background.width;
      height: i-background.height;

      background: accent.fg4;

      border-radius: style.border-radius;

      drop-shadow-color: accent.fg3;
      drop-shadow-blur: style.shadow-blur;
    }

    i-background := Rectangle {
      y: 0;
      animate y {
        duration: style.depress-duration;
        easing: ease-in;
      }

      width: i-label.width + style.padding-x * 2;
      height: i-label.height + style.padding-y * 2;

      background: filled ? accent.bg2 : base-accent.bg1;

      border-color: accent.fg2;
      border-width: style.border-width;
      border-radius: style.border-radius;

      i-label := Text {
        color: !style.accent-text || filled ? base-accent.fg0 : accent.fg0;

        font-family: style.font-family;
        font-size: style.font-size;
        font-weight: style.font-weight;

        text: "Button";
      }
    }
  }

  i-touch-area := TouchArea {}

  states [
    disabled when !root.enabled : {
      root.opacity: 0.5;
    }
    pressed when root.pressed : {
      i-background.y: style.depress / 2;
    }
    hover when i-touch-area.has-hover : {
      i-bottom.background: accent.fg2; // Lighten from 4 to 2
      i-bottom.drop-shadow-color: accent.fg4; // Darken from 3 to 4
      i-background.background: filled ? accent.bg3 : base-accent.bg2; // Lighten from 2 to 3
      i-background.border-color: accent.fg1; // Lighten from 2 to 1
      // i-label.color: filled ? base-accent.fg0 : accent.fg0;
    }
  ]
}

import { GridBox, VerticalBox, ScrollView } from "std-widgets.slint";
import { LabelBar } from "labelbar.slint";

component ButtonColorsDisplay inherits Rectangle {
  in property <bool> dark: true;
  in property <ControlTheme> theme: Rounded;
  in property <ControlSize> size: Medium;
  in property <bool> filled: true;
  in property <bool> enabled: true;

  background: MaterialScheme.scheme(dark, "grey").bg0;

  VerticalLayout {
    i-label := LabelBar {
      background: transparent;
      text-color: dark ? Colors.white : Colors.black;
      height: 60px;
      font-size: 10px;
      wrap: word-wrap;
      text:
        (dark ? "dark" : "light")
        + (theme == ControlTheme.Boxy ? "-boxy" : theme == ControlTheme.Rounded ? "-rounded" : "")
        + (filled ? "-filled" : "")
        + (size == ControlSize.Large ? "-large"
          : size == ControlSize.Medium ? "-medium"
          : size == ControlSize.Small ? "-small" : "")
        + (enabled ? "" : "-disabled");
    }
    for color in MaterialPalette.colors: Button {
      base-accent: MaterialScheme.scheme(dark, "grey");
      accent: MaterialScheme.scheme(dark, color);
      enabled: enabled;
      filled: filled;
      size: size;
      theme: theme;
    }
  }
}

export component ButtonStylesTableDisplay inherits Rectangle {
  background: MaterialScheme.base-accent.bg1;

  ScrollView {
    VerticalLayout { // Stack different sizes vertically
      for size in [ControlSize.Small, ControlSize.Medium, ControlSize.Large] : VerticalLayout {
        LabelBar {
          background: MaterialScheme.scheme(true, "grey").bg0;
          text-color: MaterialScheme.scheme(true, "grey").fg0;
          text:
            size == ControlSize.Small ? "ControlSize.Small"
            : size == ControlSize.Medium ? "ControlSize.Medium"
            : size == ControlSize.Large ? "ControlSize.Large" : "";
        }
        HorizontalLayout { // Stack enabled/disabled horizontally
          for enabled in [true, false] : HorizontalLayout {
            for theme in [ControlTheme.Rounded, ControlTheme.Boxy] : HorizontalLayout {
              for dark in [true, false] : HorizontalLayout {
                Rectangle {
                  width: 10px;
                  background: MaterialScheme.scheme(dark, "grey").bg0;
                }
                for filled in [true, false] : ButtonColorsDisplay {
                  dark: dark;
                  theme: theme;
                  size: size;
                  filled: filled;
                  enabled: enabled;
                }
                Rectangle {
                  width: 10px;
                  background: MaterialScheme.scheme(dark, "grey").bg0;
                }
              }
            }
          }
        }
      }
    }
  }
}
